from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from states import GuessKnb
from games.knb_logic import knb

router = Router()

@router.message(F.text == "ü§ö –ö–ù–ë")
async def start_knb_game(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(GuessKnb.knbguessing)
    await state.update_data(wins=0, lose=0)
    await message.answer("–ò–≥—Ä–∞–µ–º –≤ ""–∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"" –¥–æ —Ç—Ä–µ—Ö —Ä–∞—É–Ω–¥–æ–≤")

print(knb)

@router.message(GuessKnb.knbguessing)
async def handle_knb(message: Message, state: FSMContext):
    bot_choice = knb()
    guess = message.text.strip().capitalize()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç
    data = await state.get_data()
    wins = data.get("wins", 0)
    lose = data.get("lose", 0)

    await state.update_data(wins=0, lose=0)
    if guess not in ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞")
        return
    
    # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    result = ""
    if guess == "–ö–∞–º–µ–Ω—å":
        if bot_choice == 1:
            result = "–ö–∞–º–µ–Ω—å\n–ù–∏—á—å—è"
        elif bot_choice == 2:
            wins += 1
            result = "–ù–æ–∂–Ω–∏—Ü—ã\n–¢—ã –ø–æ–±–µ–¥–∏–ª"
        elif bot_choice == 3:
            lose += 1
            result = "–ë—É–º–∞–≥–∞\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª"
    elif guess == "–ù–æ–∂–Ω–∏—Ü—ã":
        if bot_choice == 1:
            lose += 1
            result = "–ö–∞–º–µ–Ω—å\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª"
        elif bot_choice == 2:
            result = "–ù–æ–∂–Ω–∏—Ü—ã\n–ù–∏—á—å—è"
        elif bot_choice == 3:
            wins += 1
            result = "–ë—É–º–∞–≥–∞\n–¢—ã –ø–æ–±–µ–¥–∏–ª"
    elif guess == "–ë—É–º–∞–≥–∞":
        if bot_choice == 1:
            wins += 1
            result = "–ö–∞–º–µ–Ω—å\n–¢—ã –ø–æ–±–µ–¥–∏–ª"
        elif bot_choice == 2:
            lose += 1
            result = "–ù–æ–∂–Ω–∏—Ü—ã\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª"
        elif bot_choice == 3:
            result = "–ë—É–º–∞–≥–∞\n–ù–∏—á—å—è"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
    await state.update_data(wins=wins, lose=lose)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
    if wins >= 3:
        await message.answer(f"{result}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É! –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: {wins} / {lose}")
        await state.clear()
    elif lose >= 3:
        await message.answer(f"{result}\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –∏–≥—Ä—É. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: {wins} / {lose}")
        await state.clear()
    else:
        await message.answer(f"{result}\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {wins} / {lose}")